package com.visitorapp.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import com.visitorapp.model.Customer;

import com.visitorapp.service.CustomerService;
import com.visitorapp.service.persistence.CustomerPersistence;
import com.visitorapp.service.persistence.CustomerStoreVisitPersistence;
import com.visitorapp.service.persistence.StoreLocationPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the customer remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.visitorapp.service.impl.CustomerServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.visitorapp.service.impl.CustomerServiceImpl
 * @see com.visitorapp.service.CustomerServiceUtil
 * @generated
 */
public abstract class CustomerServiceBaseImpl extends BaseServiceImpl
    implements CustomerService, IdentifiableBean {
    @BeanReference(type = com.visitorapp.service.CustomerLocalService.class)
    protected com.visitorapp.service.CustomerLocalService customerLocalService;
    @BeanReference(type = com.visitorapp.service.CustomerService.class)
    protected com.visitorapp.service.CustomerService customerService;
    @BeanReference(type = CustomerPersistence.class)
    protected CustomerPersistence customerPersistence;
    @BeanReference(type = com.visitorapp.service.CustomerStoreVisitLocalService.class)
    protected com.visitorapp.service.CustomerStoreVisitLocalService customerStoreVisitLocalService;
    @BeanReference(type = com.visitorapp.service.CustomerStoreVisitService.class)
    protected com.visitorapp.service.CustomerStoreVisitService customerStoreVisitService;
    @BeanReference(type = CustomerStoreVisitPersistence.class)
    protected CustomerStoreVisitPersistence customerStoreVisitPersistence;
    @BeanReference(type = com.visitorapp.service.StoreLocationLocalService.class)
    protected com.visitorapp.service.StoreLocationLocalService storeLocationLocalService;
    @BeanReference(type = com.visitorapp.service.StoreLocationService.class)
    protected com.visitorapp.service.StoreLocationService storeLocationService;
    @BeanReference(type = StoreLocationPersistence.class)
    protected StoreLocationPersistence storeLocationPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private CustomerServiceClpInvoker _clpInvoker = new CustomerServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.visitorapp.service.CustomerServiceUtil} to access the customer remote service.
     */

    /**
     * Returns the customer local service.
     *
     * @return the customer local service
     */
    public com.visitorapp.service.CustomerLocalService getCustomerLocalService() {
        return customerLocalService;
    }

    /**
     * Sets the customer local service.
     *
     * @param customerLocalService the customer local service
     */
    public void setCustomerLocalService(
        com.visitorapp.service.CustomerLocalService customerLocalService) {
        this.customerLocalService = customerLocalService;
    }

    /**
     * Returns the customer remote service.
     *
     * @return the customer remote service
     */
    public com.visitorapp.service.CustomerService getCustomerService() {
        return customerService;
    }

    /**
     * Sets the customer remote service.
     *
     * @param customerService the customer remote service
     */
    public void setCustomerService(
        com.visitorapp.service.CustomerService customerService) {
        this.customerService = customerService;
    }

    /**
     * Returns the customer persistence.
     *
     * @return the customer persistence
     */
    public CustomerPersistence getCustomerPersistence() {
        return customerPersistence;
    }

    /**
     * Sets the customer persistence.
     *
     * @param customerPersistence the customer persistence
     */
    public void setCustomerPersistence(CustomerPersistence customerPersistence) {
        this.customerPersistence = customerPersistence;
    }

    /**
     * Returns the customer store visit local service.
     *
     * @return the customer store visit local service
     */
    public com.visitorapp.service.CustomerStoreVisitLocalService getCustomerStoreVisitLocalService() {
        return customerStoreVisitLocalService;
    }

    /**
     * Sets the customer store visit local service.
     *
     * @param customerStoreVisitLocalService the customer store visit local service
     */
    public void setCustomerStoreVisitLocalService(
        com.visitorapp.service.CustomerStoreVisitLocalService customerStoreVisitLocalService) {
        this.customerStoreVisitLocalService = customerStoreVisitLocalService;
    }

    /**
     * Returns the customer store visit remote service.
     *
     * @return the customer store visit remote service
     */
    public com.visitorapp.service.CustomerStoreVisitService getCustomerStoreVisitService() {
        return customerStoreVisitService;
    }

    /**
     * Sets the customer store visit remote service.
     *
     * @param customerStoreVisitService the customer store visit remote service
     */
    public void setCustomerStoreVisitService(
        com.visitorapp.service.CustomerStoreVisitService customerStoreVisitService) {
        this.customerStoreVisitService = customerStoreVisitService;
    }

    /**
     * Returns the customer store visit persistence.
     *
     * @return the customer store visit persistence
     */
    public CustomerStoreVisitPersistence getCustomerStoreVisitPersistence() {
        return customerStoreVisitPersistence;
    }

    /**
     * Sets the customer store visit persistence.
     *
     * @param customerStoreVisitPersistence the customer store visit persistence
     */
    public void setCustomerStoreVisitPersistence(
        CustomerStoreVisitPersistence customerStoreVisitPersistence) {
        this.customerStoreVisitPersistence = customerStoreVisitPersistence;
    }

    /**
     * Returns the store location local service.
     *
     * @return the store location local service
     */
    public com.visitorapp.service.StoreLocationLocalService getStoreLocationLocalService() {
        return storeLocationLocalService;
    }

    /**
     * Sets the store location local service.
     *
     * @param storeLocationLocalService the store location local service
     */
    public void setStoreLocationLocalService(
        com.visitorapp.service.StoreLocationLocalService storeLocationLocalService) {
        this.storeLocationLocalService = storeLocationLocalService;
    }

    /**
     * Returns the store location remote service.
     *
     * @return the store location remote service
     */
    public com.visitorapp.service.StoreLocationService getStoreLocationService() {
        return storeLocationService;
    }

    /**
     * Sets the store location remote service.
     *
     * @param storeLocationService the store location remote service
     */
    public void setStoreLocationService(
        com.visitorapp.service.StoreLocationService storeLocationService) {
        this.storeLocationService = storeLocationService;
    }

    /**
     * Returns the store location persistence.
     *
     * @return the store location persistence
     */
    public StoreLocationPersistence getStoreLocationPersistence() {
        return storeLocationPersistence;
    }

    /**
     * Sets the store location persistence.
     *
     * @param storeLocationPersistence the store location persistence
     */
    public void setStoreLocationPersistence(
        StoreLocationPersistence storeLocationPersistence) {
        this.storeLocationPersistence = storeLocationPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Customer.class;
    }

    protected String getModelClassName() {
        return Customer.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = customerPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
