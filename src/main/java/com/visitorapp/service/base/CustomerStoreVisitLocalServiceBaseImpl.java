package com.visitorapp.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.visitorapp.model.CustomerStoreVisit;

import com.visitorapp.service.CustomerStoreVisitLocalService;
import com.visitorapp.service.persistence.CustomerPersistence;
import com.visitorapp.service.persistence.CustomerStoreVisitPersistence;
import com.visitorapp.service.persistence.StoreLocationPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the customer store visit local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.visitorapp.service.impl.CustomerStoreVisitLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.visitorapp.service.impl.CustomerStoreVisitLocalServiceImpl
 * @see com.visitorapp.service.CustomerStoreVisitLocalServiceUtil
 * @generated
 */
public abstract class CustomerStoreVisitLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements CustomerStoreVisitLocalService,
        IdentifiableBean {
    @BeanReference(type = com.visitorapp.service.CustomerLocalService.class)
    protected com.visitorapp.service.CustomerLocalService customerLocalService;
    @BeanReference(type = com.visitorapp.service.CustomerService.class)
    protected com.visitorapp.service.CustomerService customerService;
    @BeanReference(type = CustomerPersistence.class)
    protected CustomerPersistence customerPersistence;
    @BeanReference(type = com.visitorapp.service.CustomerStoreVisitLocalService.class)
    protected com.visitorapp.service.CustomerStoreVisitLocalService customerStoreVisitLocalService;
    @BeanReference(type = com.visitorapp.service.CustomerStoreVisitService.class)
    protected com.visitorapp.service.CustomerStoreVisitService customerStoreVisitService;
    @BeanReference(type = CustomerStoreVisitPersistence.class)
    protected CustomerStoreVisitPersistence customerStoreVisitPersistence;
    @BeanReference(type = com.visitorapp.service.StoreLocationLocalService.class)
    protected com.visitorapp.service.StoreLocationLocalService storeLocationLocalService;
    @BeanReference(type = com.visitorapp.service.StoreLocationService.class)
    protected com.visitorapp.service.StoreLocationService storeLocationService;
    @BeanReference(type = StoreLocationPersistence.class)
    protected StoreLocationPersistence storeLocationPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private CustomerStoreVisitLocalServiceClpInvoker _clpInvoker = new CustomerStoreVisitLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.visitorapp.service.CustomerStoreVisitLocalServiceUtil} to access the customer store visit local service.
     */

    /**
     * Adds the customer store visit to the database. Also notifies the appropriate model listeners.
     *
     * @param customerStoreVisit the customer store visit
     * @return the customer store visit that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public CustomerStoreVisit addCustomerStoreVisit(
        CustomerStoreVisit customerStoreVisit) throws SystemException {
        customerStoreVisit.setNew(true);

        return customerStoreVisitPersistence.update(customerStoreVisit);
    }

    /**
     * Creates a new customer store visit with the primary key. Does not add the customer store visit to the database.
     *
     * @param customerstorevisitId the primary key for the new customer store visit
     * @return the new customer store visit
     */
    @Override
    public CustomerStoreVisit createCustomerStoreVisit(
        long customerstorevisitId) {
        return customerStoreVisitPersistence.create(customerstorevisitId);
    }

    /**
     * Deletes the customer store visit with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param customerstorevisitId the primary key of the customer store visit
     * @return the customer store visit that was removed
     * @throws PortalException if a customer store visit with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public CustomerStoreVisit deleteCustomerStoreVisit(
        long customerstorevisitId) throws PortalException, SystemException {
        return customerStoreVisitPersistence.remove(customerstorevisitId);
    }

    /**
     * Deletes the customer store visit from the database. Also notifies the appropriate model listeners.
     *
     * @param customerStoreVisit the customer store visit
     * @return the customer store visit that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public CustomerStoreVisit deleteCustomerStoreVisit(
        CustomerStoreVisit customerStoreVisit) throws SystemException {
        return customerStoreVisitPersistence.remove(customerStoreVisit);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(CustomerStoreVisit.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return customerStoreVisitPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.visitorapp.model.impl.CustomerStoreVisitModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return customerStoreVisitPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.visitorapp.model.impl.CustomerStoreVisitModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return customerStoreVisitPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return customerStoreVisitPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return customerStoreVisitPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public CustomerStoreVisit fetchCustomerStoreVisit(long customerstorevisitId)
        throws SystemException {
        return customerStoreVisitPersistence.fetchByPrimaryKey(customerstorevisitId);
    }

    /**
     * Returns the customer store visit with the primary key.
     *
     * @param customerstorevisitId the primary key of the customer store visit
     * @return the customer store visit
     * @throws PortalException if a customer store visit with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public CustomerStoreVisit getCustomerStoreVisit(long customerstorevisitId)
        throws PortalException, SystemException {
        return customerStoreVisitPersistence.findByPrimaryKey(customerstorevisitId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return customerStoreVisitPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the customer store visits.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.visitorapp.model.impl.CustomerStoreVisitModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of customer store visits
     * @param end the upper bound of the range of customer store visits (not inclusive)
     * @return the range of customer store visits
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<CustomerStoreVisit> getCustomerStoreVisits(int start, int end)
        throws SystemException {
        return customerStoreVisitPersistence.findAll(start, end);
    }

    /**
     * Returns the number of customer store visits.
     *
     * @return the number of customer store visits
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getCustomerStoreVisitsCount() throws SystemException {
        return customerStoreVisitPersistence.countAll();
    }

    /**
     * Updates the customer store visit in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param customerStoreVisit the customer store visit
     * @return the customer store visit that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public CustomerStoreVisit updateCustomerStoreVisit(
        CustomerStoreVisit customerStoreVisit) throws SystemException {
        return customerStoreVisitPersistence.update(customerStoreVisit);
    }

    /**
     * Returns the customer local service.
     *
     * @return the customer local service
     */
    public com.visitorapp.service.CustomerLocalService getCustomerLocalService() {
        return customerLocalService;
    }

    /**
     * Sets the customer local service.
     *
     * @param customerLocalService the customer local service
     */
    public void setCustomerLocalService(
        com.visitorapp.service.CustomerLocalService customerLocalService) {
        this.customerLocalService = customerLocalService;
    }

    /**
     * Returns the customer remote service.
     *
     * @return the customer remote service
     */
    public com.visitorapp.service.CustomerService getCustomerService() {
        return customerService;
    }

    /**
     * Sets the customer remote service.
     *
     * @param customerService the customer remote service
     */
    public void setCustomerService(
        com.visitorapp.service.CustomerService customerService) {
        this.customerService = customerService;
    }

    /**
     * Returns the customer persistence.
     *
     * @return the customer persistence
     */
    public CustomerPersistence getCustomerPersistence() {
        return customerPersistence;
    }

    /**
     * Sets the customer persistence.
     *
     * @param customerPersistence the customer persistence
     */
    public void setCustomerPersistence(CustomerPersistence customerPersistence) {
        this.customerPersistence = customerPersistence;
    }

    /**
     * Returns the customer store visit local service.
     *
     * @return the customer store visit local service
     */
    public com.visitorapp.service.CustomerStoreVisitLocalService getCustomerStoreVisitLocalService() {
        return customerStoreVisitLocalService;
    }

    /**
     * Sets the customer store visit local service.
     *
     * @param customerStoreVisitLocalService the customer store visit local service
     */
    public void setCustomerStoreVisitLocalService(
        com.visitorapp.service.CustomerStoreVisitLocalService customerStoreVisitLocalService) {
        this.customerStoreVisitLocalService = customerStoreVisitLocalService;
    }

    /**
     * Returns the customer store visit remote service.
     *
     * @return the customer store visit remote service
     */
    public com.visitorapp.service.CustomerStoreVisitService getCustomerStoreVisitService() {
        return customerStoreVisitService;
    }

    /**
     * Sets the customer store visit remote service.
     *
     * @param customerStoreVisitService the customer store visit remote service
     */
    public void setCustomerStoreVisitService(
        com.visitorapp.service.CustomerStoreVisitService customerStoreVisitService) {
        this.customerStoreVisitService = customerStoreVisitService;
    }

    /**
     * Returns the customer store visit persistence.
     *
     * @return the customer store visit persistence
     */
    public CustomerStoreVisitPersistence getCustomerStoreVisitPersistence() {
        return customerStoreVisitPersistence;
    }

    /**
     * Sets the customer store visit persistence.
     *
     * @param customerStoreVisitPersistence the customer store visit persistence
     */
    public void setCustomerStoreVisitPersistence(
        CustomerStoreVisitPersistence customerStoreVisitPersistence) {
        this.customerStoreVisitPersistence = customerStoreVisitPersistence;
    }

    /**
     * Returns the store location local service.
     *
     * @return the store location local service
     */
    public com.visitorapp.service.StoreLocationLocalService getStoreLocationLocalService() {
        return storeLocationLocalService;
    }

    /**
     * Sets the store location local service.
     *
     * @param storeLocationLocalService the store location local service
     */
    public void setStoreLocationLocalService(
        com.visitorapp.service.StoreLocationLocalService storeLocationLocalService) {
        this.storeLocationLocalService = storeLocationLocalService;
    }

    /**
     * Returns the store location remote service.
     *
     * @return the store location remote service
     */
    public com.visitorapp.service.StoreLocationService getStoreLocationService() {
        return storeLocationService;
    }

    /**
     * Sets the store location remote service.
     *
     * @param storeLocationService the store location remote service
     */
    public void setStoreLocationService(
        com.visitorapp.service.StoreLocationService storeLocationService) {
        this.storeLocationService = storeLocationService;
    }

    /**
     * Returns the store location persistence.
     *
     * @return the store location persistence
     */
    public StoreLocationPersistence getStoreLocationPersistence() {
        return storeLocationPersistence;
    }

    /**
     * Sets the store location persistence.
     *
     * @param storeLocationPersistence the store location persistence
     */
    public void setStoreLocationPersistence(
        StoreLocationPersistence storeLocationPersistence) {
        this.storeLocationPersistence = storeLocationPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.visitorapp.model.CustomerStoreVisit",
            customerStoreVisitLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.visitorapp.model.CustomerStoreVisit");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return CustomerStoreVisit.class;
    }

    protected String getModelClassName() {
        return CustomerStoreVisit.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = customerStoreVisitPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
